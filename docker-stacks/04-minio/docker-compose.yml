version: '3.7'

x-default-opts: 
  &default-opts
  logging:
    options:
      max-size: "${SIMVA_LOGGING_MAX_FILE_SIZE}"
      max-file: "${SIMVA_LOGGING_MAX_FILES}"
  # driver: "gelf"
  # options:
  #   gelf-address: "udp://127.0.0.1:5000"

networks:
  traefik_services:
    name: "${SIMVA_SERVICE_NETWORK:-traefik_services}"
    external: true

services:
# https://github.com/minio/minio/issues/7394#issuecomment-476552537
# https://github.com/minio/minio/blob/master/docs/sts/web-identity.md
# https://github.com/minio/minio/blob/master/docs/sts/keycloak.md
# https://github.com/minio/minio/blob/master/docs/sts/wso2.md
  minio:
    << : *default-opts
    image: ${SIMVA_MINIO_IMAGE:-minio/minio}:${SIMVA_MINIO_VERSION:-RELEASE.2020-09-26T03-44-56Z}
    entrypoint: >
      /bin/sh -c '
      /container-tools/wait-for -t $${WAIT_TIMEOUT} -it $${MINIO_SSO_HOST};
        if [ ! -e "/etc/ssl/certs/internal-CA.pem" ]; then
          cp /root/.minio/certs/CAs/rootCA.pem "/etc/ssl/certs/internal-CA.pem";
          cat "/etc/ssl/certs/internal-CA.pem" >> /etc/ssl/cert.pem;
        fi;
        wait_time=$${MC_WAIT_TIME};
        count=$${MC_MAX_RETRIES};
        done="ko";
        while [ $$count -gt 0 ] && [ "$$done" != "ok" ]; do
          echo 1>&2 "Checking Keycloak availability for minio: $$(($${MC_MAX_RETRIES}-$$count+1)) pass";
          wget "https://$${MINIO_SSO_HOST}/realms/$${MINIO_SSO_REALM}/.well-known/openid-configuration" -O - >/dev/null;
          ret=$$?;
          if [ $$ret -eq 0 ]; then
            done="ok";
          else
            echo 1>&2 "Keycloak not available, waiting $${wait_time}s";
            sleep $${wait_time};
          fi;
          count=$$((count-1));
        done;
        if [ $$count -eq 0 ] && [ "$$done" != "ok" ]; then
          echo 1>&2 "Keycloak not available !";
          exit 1
        fi;
        if [ "$$done" == "ok" ]; then
          echo 1>&2 "Keycloak available !";
        fi;
        /usr/bin/docker-entrypoint.sh $$@;
      '
    command:
     - '--'
     - 'server'
     - '/data'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SIMVA_DATA_HOME:-/home/vagrant/docker-stacks/data}/minio:/data
# be advised if minio is launched as a non-root user you need to change this setting
# Note too that this setting it is only needed if using a non-recognized CA
# (https://docs.min.io/docs/how-to-secure-access-to-minio-server-with-tls.html#install-certificates-from-third-party-cas)
      - ${SIMVA_TLS_HOME?TLS home folder required}/ca:/root/.minio/certs/CAs
      - ${SIMVA_CONTAINER_TOOLS_HOME:-/home/vagrant/docker-stacks/container-tools}:/container-tools
    environment:
      MINIO_ACCESS_KEY: "${SIMVA_MINIO_ACCESS_KEY:-minio}"
      MINIO_SECRET_KEY: "${SIMVA_MINIO_SECRET_KEY:-secret}"
      MINIO_IDENTITY_OPENID_CLIENT_ID: "${SIMVA_MINIO_CLIENT_ID:-minio}"
      MINIO_IDENTITY_OPENID_CONFIG_URL: "https://${SIMVA_SSO_HOST_SUBDOMAIN:-sso}.${SIMVA_EXTERNAL_DOMAIN:-external.test}/realms/${SIMVA_SSO_REALM:-simva}/.well-known/openid-configuration"
      MINIO_IDENTITY_OPENID_SCOPES: "${SIMVA_MINIO_IDENTITY_OPENID_SCOPES:-openid,policy_role_attribute}"
      MINIO_SSO_HOST: "${SIMVA_SSO_HOST_SUBDOMAIN:-sso}.${SIMVA_EXTERNAL_DOMAIN:-external.test}:443"
      MINIO_SSO_REALM: "${SIMVA_SSO_REALM:-simva}"
      WAIT_TIMEOUT: ${SIMVA_WAIT_TIMEOUT:-240}
      MC_WAIT_TIME: ${SIMVA_WAIT_TIME:-10}
      MC_MAX_RETRIES: ${SIMVA_MAX_RETRIES:-20}
    restart: unless-stopped
    healthcheck:
      test: "curl -sS http://localhost:9000/minio/health/live || exit 1"
      interval: 30s
      timeout: 5s
      retries: 3
    hostname: ${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_INTERNAL_DOMAIN:-internal.test}
    networks:
      default:
        aliases:
          - ${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_INTERNAL_DOMAIN:-internal.test}
      traefik_services:
        aliases:
          - ${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_INTERNAL_DOMAIN:-internal.test}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio.rule=Host(`${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_EXTERNAL_DOMAIN:-external.test}`)"

# mc config host add --insecure simva-minio https://${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_EXTERNAL_DOMAIN:-external.test} minio password
# mc --debug --insecure mb simva-minio/prueba
# mc --debug --insecure ls simva-minio
# https://github.com/minio/minio/issues/7086 -> write-user-folder.json
# https://github.com/minio/minio/issues/8345 -> write-user-folder-jwt.json
#
# Not required (already configured using env variables but useful:
#   /usr/bin/mc --debug --insecure admin config set simva-minio identity_openid config_url="https://${SIMVA_SSO_HOST_SUBDOMAIN:-sso}.${SIMVA_EXTERNAL_DOMAIN:-external.test}/realms/simva/.well-known/openid-configuration" client_id="https://minio.external.test";
#   /usr/bin/mc --debug --insecure admin service restart simva-minio;

# XXX remove mcs password
  mc:
    << : *default-opts
    image: ${SIMVA_MINIO_MC_IMAGE:-minio/mc}:${SIMVA_MINIO_MC_VERSION:-RELEASE.2020-09-03T00-08-28Z}
    entrypoint: >
      /bin/sh -c '
      /container-tools/wait-for -t $${WAIT_TIMEOUT} -it $${MINIO_HOST} && if [ ! -e "/data/minio-initialized" ]; then
        if [ ! -e "/etc/ssl/certs/internal-CA.pem" ]; then
          cp /root/.mc/certs/CAs/rootCA.pem "/etc/ssl/certs/internal-CA.pem";
          cat "/etc/ssl/certs/internal-CA.pem" >> /etc/ssl/cert.pem;
        fi;
        wait_time=$${MC_WAIT_TIME};
        count=$${MC_MAX_RETRIES};
        done="ko";
        while [ $$count -gt 0 ] && [ "$$done" != "ok" ]; do
          echo 1>&2 "Checking Keycloak availability for minio: $$(($${MC_MAX_RETRIES}-$$count+1)) pass";
          wget "https://$${MINIO_SSO_HOST}/realms/$${MINIO_SSO_REALM}/.well-known/openid-configuration" -O - >/dev/null;
          ret=$$?;
          if [ $$ret -eq 0 ]; then
            done="ok";
          else
            echo 1>&2 "Keycloak not available, waiting $${wait_time}s";
            sleep $${wait_time};
          fi;
          count=$$((count-1));
        done;
        if [ $$count -eq 0 ] && [ "$$done" != "ok" ]; then
          echo 1>&2 "Keycloak not available !";
          exit 1
        fi;
        if [ "$$done" == "ok" ]; then
          echo 1>&2 "Keycloak available !";
        fi;
      fi;
      /container-tools/wait-for -t $${WAIT_TIMEOUT} -it $${MINIO_HOST} && if [ ! -e "/data/minio-initialized" ]; then
        wait_time=$${MC_WAIT_TIME};
        count=$${MC_MAX_RETRIES};
        done="ko";
        while [ $$count -gt 0 ] && [ "$$done" != "ok" ]; do
          echo 1>&2 "Checking minio: $$(($${MC_MAX_RETRIES}-$$count+1)) pass";
          wget "$${MINIO_URL}/minio/health/live" -O - >/dev/null;
          ret=$$?;
          if [ $$ret -eq 0 ]; then
            done="ok";
          else
            echo 1>&2 "Minio not available, waiting $${wait_time}s";
            sleep $${wait_time};
          fi;
          count=$$((count-1));
        done;
        if [ $$count -eq 0 ] && [ "$$done" != "ok" ]; then
          echo 1>&2 "Minio not available !";
          exit 1
        fi;
        if [ "$$done" == "ok" ]; then
          echo 1>&2 "Minio available !";
        fi;
        /usr/bin/mc config host add simva-minio $${MINIO_URL} $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
        /usr/bin/mc --debug admin policy add simva-minio/ write-user-folder /policies/write-user-folder.json;
        /usr/bin/mc --debug admin policy add simva-minio/ write-user-folder-jwt /policies/write-user-folder-jwt.json;
        /usr/bin/mc --debug admin policy add simva-minio/ readonly-user-folder /policies/readonly-user-folder.json;
        /usr/bin/mc --debug admin policy add simva-minio/ readonly-user-folder-jwt /policies/readonly-user-folder-jwt.json;
        /usr/bin/mc --debug admin policy add simva-minio/ simva-adv4-user /policies/simva-adv4-user.json;
        /usr/bin/mc --debug admin user add simva-minio $${MINIO_MCS_USER} $${MINIO_MCS_SECRET}
        /usr/bin/mc --debug admin policy add simva-minio/ mcsAdmin /policies/mcsAdmin.json;
        /usr/bin/mc --debug admin policy add simva-minio/ mcsRestrictedAdmin /policies/mcsRestrictedAdmin.json;
        /usr/bin/mc --debug admin policy set simva-minio/ mcsAdmin user=$${MINIO_MCS_USER}
        /usr/bin/mc --debug admin user add simva-minio $${SIMVA_SINK_USER} $${SIMVA_SINK_SECRET}
        /usr/bin/mc --debug admin policy add simva-minio/ simvaSink /policies/kafka-connect-simva-sink.json;
        /usr/bin/mc --debug admin policy set simva-minio/ simvaSink user=$${SIMVA_SINK_USER}
        /usr/bin/mc --debug mb simva-minio/$${MINIO_BUCKET};
        touch /data/minio-initialized;
      fi
      '
    volumes:
      - ${SIMVA_DATA_HOME:-/home/vagrant/docker-stacks/data}/minio:/data
      - /etc/localtime:/etc/localtime:ro
      - ${SIMVA_CONFIG_HOME:-/home/vagrant/docker-stacks/config}/minio/policies:/policies:ro
      # Add extra CA (for self-signed certificates)
      - ${SIMVA_TLS_HOME?TLS home folder required}/ca:/root/.mc/certs/CAs/
      - ${SIMVA_CONTAINER_TOOLS_HOME:-/home/vagrant/docker-stacks/container-tools}:/container-tools
    environment:
      MINIO_SSO_HOST: "${SIMVA_SSO_HOST_SUBDOMAIN:-sso}.${SIMVA_EXTERNAL_DOMAIN:-external.test}:443"
      MINIO_SSO_REALM: "${SIMVA_SSO_REALM:-simva}"
      MINIO_HOST: "${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_EXTERNAL_DOMAIN:-external.test}:443"
      MINIO_URL: "https://${SIMVA_MINIO_HOST_SUBDOMAIN:-minio}.${SIMVA_EXTERNAL_DOMAIN:-external.test}:443"
      MINIO_ACCESS_KEY: "${SIMVA_MINIO_ACCESS_KEY:-minio}"
      MINIO_SECRET_KEY: "${SIMVA_MINIO_SECRET_KEY:-secret}"
      MINIO_MCS_USER: "${SIMVA_MINIO_MCS_USER:-mcs}"
      MINIO_MCS_SECRET: "${SIMVA_MINIO_MCS_SECRET:-password}"
      MINIO_BUCKET: "${SIMVA_TRACES_BUCKET_NAME:-traces}"
      SIMVA_SINK_USER: "${SIMVA_KAFKA_CONNECT_SINK_USER:-simva-sink}"
      SIMVA_SINK_SECRET: "${SIMVA_KAFKA_CONNECT_SINK_SECRET:-password}"
      MC_WAIT_TIME: ${SIMVA_WAIT_TIME:-10}
      MC_MAX_RETRIES: ${SIMVA_MAX_RETRIES:-20}
      WAIT_TIMEOUT: ${SIMVA_WAIT_TIMEOUT:-240}
    hostname: mc.${SIMVA_INTERNAL_DOMAIN:-internal.test}
    networks:
      traefik_services:
        aliases:
          - mc.${SIMVA_INTERNAL_DOMAIN:-internal.test}
